{"version":3,"sources":["../../src/scripts/projection.js"],"names":["getProjectionMatrix","dimensions","perspective","matrix","Matrix","from","identity","new","i"],"mappings":";;AAAA;AACA;AACA;;AAEA,SAASA,mBAAT,CAA6BC,UAA7B,EAAyCC,WAAzC,EAAsD;AACrD;;;;;;;;;;;AAWA,KAAIC,eAAJ;;AAEA,KAAIF,eAAe,CAAnB,EAAsB;AACrBE,WAASC,OAAOC,IAAP,CAAY,CAAC,CAAC,CAAD,CAAD,EAAM,CAAC,CAAD,CAAN,CAAZ,CAAT;AACA,EAFD,MAGK,IAAIJ,eAAe,CAAnB,EAAsB;AAC1BE,WAASC,OAAOE,QAAP,CAAgB,CAAhB,CAAT;AACA,EAFI,MAEE;AACNH,WAASC,OAAOG,GAAP,CAAWN,UAAX,EAAuBA,UAAvB,CAAT;;AAEA,OAAK,IAAIO,IAAE,CAAX,EAAcA,IAAEP,aAAW,CAA3B,EAA8BO,GAA9B,EAAmC;AAClCL,UAAOK,CAAP,EAAUA,CAAV,IAAeN,WAAf;AACA;AACD;;AAED,QAAOC,MAAP;AACA","file":"projection.js","sourcesContent":["//\r\n// Projection\r\n//\r\n\r\nfunction getProjectionMatrix(dimensions, perspective) {\r\n\t/*\r\n\tReturn a simple projection matrix that depends on p (perspective)\r\n\t[p, 0, ..., 0, 0]\r\n\t[0, p, ..., 0, 0]\r\n\t[      ...      ]\r\n\t[0, 0, ..., p, 0]\r\n\t[0, 0, ..., 0, 0]\r\n\tIf the dimension is 2, we don't need to project it to dimension 1 --> identity matix\r\n\tIf the dimension is 1, we need to project into 2 dimensions (add a dimension) --> [[1], [0]] matrix\r\n\t*/\r\n\r\n\tlet matrix\r\n\r\n\tif (dimensions === 1) {\r\n\t\tmatrix = Matrix.from([[1], [0]])\r\n\t}\r\n\telse if (dimensions === 2) {\r\n\t\tmatrix = Matrix.identity(2)\r\n\t} else {\r\n\t\tmatrix = Matrix.new(dimensions, dimensions)\r\n\r\n\t\tfor (let i=0; i<dimensions-1; i++) {\r\n\t\t\tmatrix[i][i] = perspective\r\n\t\t}\r\n\t}\r\n\r\n\treturn matrix\r\n}"]}